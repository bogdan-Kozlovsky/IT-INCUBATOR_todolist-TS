{"version":3,"sources":["serviceWorker.ts","api/types.ts","store/app/slices.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","components/AddItemForm/AddItemForm.tsx","hooks/useSelector.ts","store/app/selectors.ts","api/config/index.ts","api/auth/index.ts","utils/error-utils.ts","store/auth/asyncThunks/loginTC.ts","store/auth/slices.ts","store/auth/selectors.ts","api/todolist/index.ts","store/todolists/slices.ts","components/Header/Header.tsx","store/auth/asyncThunks/logoutTC.ts","store/todolists/asyncThunks/addTodolistTC.ts","api/task/index.ts","store/tasks/asyncThunks/fetchTasksTC.ts","store/tasks/asyncThunks/removeTaskTC.ts","store/tasks/slices.ts","store/store.ts","features/Login/Login.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Navigate/Navigate.tsx","features/TodolistsList/Todolist/Todolist.tsx","store/tasks/asyncThunks/updateTaskTC.ts","store/tasks/selectors.ts","store/todolists/selectors.ts","features/TodolistsList/TodolistsList.tsx","store/tasks/asyncThunks/addTaskTC.ts","store/todolists/asyncThunks/removeTodolistTC.ts","store/todolists/asyncThunks/changeTodolistTitleTC.ts","store/todolists/asyncThunks/fetchTodolistsTC.ts","app/App.tsx","store/app/asyncThunks/initializeAppTC.ts","index.tsx","features/TodolistsList/style.module.css","assets/images/logo.svg","components/AddItemForm/style.module.css","components/Header/style.module.css"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","slice","createSlice","name","initialState","status","error","isInitialized","reducers","setAppErrorAC","state","action","payload","setAppStatusAC","setAppInitializedAC","app","reducer","actions","Alert","props","elevation","variant","ErrorSnackbar","useSelector","dispatch","useDispatch","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","AddItemForm","React","memo","addItem","disabled","useState","title","setTitle","setError","addItemHandler","trim","className","s","span","TextField","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","useAppSelector","selectStatus","selectIsInitialized","instance","axios","create","baseURL","process","withCredentials","headers","authAPI","data","post","delete","get","handleServerAppError","messages","length","handleServerNetworkError","message","loginTC","createAsyncThunk","param","thunkAPI","a","res","resultCode","isLoggedIn","rejectWithValue","errors","fieldsErrors","undefined","setIsLoggedInAC","extraReducers","builder","addCase","fulfilled","auth","selectIsLoggedIn","todolistsAPI","id","put","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","Header","pathname","useLocation","isOpacityElement","isStatusLoading","onLogoutClick","useCallback","then","catch","addTodolist","item","addTodolistTC","wrapper","src","logo","alt","LinearProgress","Button","taskAPI","todolistId","taskId","taskTitle","model","fetchTasksTC","thunkApi","tasks","items","removeTaskTC","addTaskAC","todoListId","updateTaskAC","t","forEach","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","formikHelpers","rejected","setFieldError","field","to","Grid","container","justify","xs","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","type","FormControlLabel","control","Checkbox","checked","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","task","changeTaskTitle","changeTaskStatus","removeTask","onClickHandler","onChangeHandler","newIsDoneValue","Completed","New","onTitleChangeHandler","newValue","key","Delete","Navigate","changeFilter","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","Todolist","changeTodolistTitle","removeTodolist","addTask","demo","onAddTaskClick","changeTodolistTitleValue","tasksForTodolist","useEffect","style","paddingTop","updateTaskTC","getState","find","apiModel","deadline","description","priority","startDate","console","warn","selectTasks","selectTodolists","TodolistsList","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","spacing","allTodolistTasks","Paper","block","App","Container","fixed","path","render","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.8500c9f7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","export type TodolistType = {\r\n  id: string;\r\n  title: string;\r\n  addedDate: string;\r\n  order: number;\r\n};\r\nexport type FieldErrorType = { field: string; error: string };\r\n\r\nexport type ResponseType<D = {}> = {\r\n  resultCode: number;\r\n  messages: Array<string>;\r\n  fieldsErrors?: Array<FieldErrorType>;\r\n  data: D;\r\n};\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3,\r\n}\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4,\r\n}\r\nexport type TaskType = {\r\n  description: string;\r\n  title: string;\r\n  status: TaskStatuses;\r\n  priority: TaskPriorities;\r\n  startDate: string;\r\n  deadline: string;\r\n  id: string;\r\n  todoListId: string;\r\n  order: number;\r\n  addedDate: string;\r\n};\r\nexport type UpdateTaskModelType = {\r\n  title: string;\r\n  description: string;\r\n  status: TaskStatuses;\r\n  priority: TaskPriorities;\r\n  startDate: string;\r\n  deadline: string;\r\n};\r\nexport type GetTasksResponse = {\r\n  error: string | null;\r\n  totalCount: number;\r\n  items: TaskType[];\r\n};\r\n\r\nexport type LoginParamsType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n  captcha?: string;\r\n};\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { InitialStateTypeApp, RequestStatusType } from 'store/app/types';\r\n\r\nexport const initialState: InitialStateTypeApp = {\r\n  status: 'idle',\r\n  error: null,\r\n  isInitialized: false,\r\n};\r\n\r\nconst slice = createSlice({\r\n  name: 'app',\r\n  initialState,\r\n  reducers: {\r\n    setAppErrorAC(\r\n      state: InitialStateTypeApp,\r\n      action: PayloadAction<{ error: string | null }>,\r\n    ) {\r\n      state.error = action.payload.error;\r\n    },\r\n    setAppStatusAC(\r\n      state: InitialStateTypeApp,\r\n      action: PayloadAction<{ status: RequestStatusType }>,\r\n    ) {\r\n      state.status = action.payload.status;\r\n    },\r\n    setAppInitializedAC(\r\n      state: InitialStateTypeApp,\r\n      action: PayloadAction<{ isInitialized: boolean }>,\r\n    ) {\r\n      state.isInitialized = action.payload.isInitialized;\r\n    },\r\n  },\r\n});\r\n\r\nexport const app = slice.reducer;\r\nexport const { setAppErrorAC, setAppStatusAC, setAppInitializedAC } = slice.actions;\r\n","import React from 'react';\r\n\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { setAppErrorAC } from 'store/app/slices';\r\nimport { AppRootStateType } from 'store/store';\r\n\r\nconst Alert = (props: AlertProps) => {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n};\r\n\r\nexport const ErrorSnackbar = () => {\r\n  const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    dispatch(setAppErrorAC({ error: null }));\r\n  };\r\n\r\n  const isOpen = error !== null;\r\n\r\n  return (\r\n    <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity=\"error\">\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n};\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\n\r\nimport { IconButton, TextField } from '@material-ui/core';\r\nimport { AddBox } from '@material-ui/icons';\r\n\r\nimport s from 'components/AddItemForm/style.module.css';\r\n\r\ntype AddItemFormPropsType = {\r\n  addItem: (title: string) => void;\r\n  disabled?: boolean;\r\n};\r\n\r\nexport const AddItemForm = React.memo(function ({\r\n  addItem,\r\n  disabled = false,\r\n}: AddItemFormPropsType) {\r\n  const [title, setTitle] = useState('');\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const addItemHandler = () => {\r\n    if (title.trim() !== '') {\r\n      addItem(title);\r\n      setTitle('');\r\n    } else {\r\n      setError('Title is required');\r\n    }\r\n  };\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value);\r\n  };\r\n\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (error !== null) {\r\n      setError(null);\r\n    }\r\n    // eslint-disable-next-line no-magic-numbers\r\n    if (e.charCode === 13) {\r\n      addItemHandler();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <span className={s.span}>Add new todolist:</span>\r\n      <TextField\r\n        variant=\"outlined\"\r\n        disabled={disabled}\r\n        error={!!error}\r\n        value={title}\r\n        onChange={onChangeHandler}\r\n        onKeyPress={onKeyPressHandler}\r\n        label=\"Title\"\r\n        helperText={error}\r\n      />\r\n      <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n        <AddBox />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n});\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\n\r\nimport { AppRootStateType } from 'store/store';\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector;\r\n","import { RequestStatusType } from 'store/app/types';\r\nimport { AppRootStateType } from 'store/store';\r\n\r\nexport const selectStatus = (state: AppRootStateType): RequestStatusType =>\r\n  state.app.status;\r\n\r\nexport const selectIsInitialized = (state: AppRootStateType): boolean =>\r\n  state.app.isInitialized;\r\n","import axios from 'axios';\r\n\r\nexport const instance = axios.create({\r\n  baseURL: process.env.REACT_APP_BASE_URL,\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': process.env.REACT_APP_API_KEY,\r\n  },\r\n});\r\n","import { instance } from 'api/config';\r\nimport { LoginParamsType, ResponseType } from 'api/types';\r\n\r\nexport const authAPI = {\r\n  login(data: LoginParamsType) {\r\n    return instance.post<ResponseType<{ userId?: number }>>('auth/login', data);\r\n  },\r\n  logout() {\r\n    return instance.delete<ResponseType<{ userId?: number }>>('auth/login');\r\n  },\r\n  me() {\r\n    return instance.get<ResponseType<{ id: number; email: string; login: string }>>(\r\n      'auth/me',\r\n    );\r\n  },\r\n};\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { ResponseType } from 'api/types';\r\nimport { setAppErrorAC, setAppStatusAC } from 'store/app/slices';\r\nimport { SetAppErrorActionType, SetAppStatusActionType } from 'store/app/types';\r\n\r\nexport const handleServerAppError = <D>(\r\n  data: ResponseType<D>,\r\n  dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>,\r\n) => {\r\n  if (data.messages.length) {\r\n    dispatch(setAppErrorAC({ error: data.messages[0] }));\r\n  } else {\r\n    dispatch(setAppErrorAC({ error: 'Some error occurred' }));\r\n  }\r\n  dispatch(setAppStatusAC({ status: 'failed' }));\r\n};\r\n\r\nexport const handleServerNetworkError = (\r\n  error: { message: string },\r\n  dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>,\r\n) => {\r\n  dispatch(\r\n    setAppErrorAC({ error: error.message ? error.message : 'Some error occurred' }),\r\n  );\r\n  dispatch(setAppStatusAC({ status: 'failed' }));\r\n};\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { AxiosError } from 'axios';\r\n\r\nimport { authAPI } from 'api/auth';\r\nimport { FieldErrorType, LoginParamsType } from 'api/types';\r\nimport { setAppStatusAC } from 'store/app/slices';\r\nimport { handleServerAppError, handleServerNetworkError } from 'utils/error-utils';\r\n\r\nexport const loginTC = createAsyncThunk<\r\n  { isLoggedIn: boolean },\r\n  LoginParamsType,\r\n  { rejectValue: { errors: Array<string>; fieldsErrors?: Array<FieldErrorType> } }\r\n>('auth/login', async (param, thunkAPI) => {\r\n  thunkAPI.dispatch(setAppStatusAC({ status: 'loading' }));\r\n  try {\r\n    const res = await authAPI.login(param);\r\n\r\n    if (res.data.resultCode === 0) {\r\n      thunkAPI.dispatch(setAppStatusAC({ status: 'succeeded' }));\r\n\r\n      return { isLoggedIn: true };\r\n    }\r\n    handleServerAppError(res.data, thunkAPI.dispatch);\r\n\r\n    return thunkAPI.rejectWithValue({\r\n      errors: res.data.messages,\r\n      fieldsErrors: res.data.fieldsErrors,\r\n    });\r\n  } catch (err) {\r\n    // @ts-ignore\r\n    const error: AxiosError = err;\r\n\r\n    handleServerNetworkError(error, thunkAPI.dispatch);\r\n\r\n    return thunkAPI.rejectWithValue({\r\n      errors: [error.message],\r\n      fieldsErrors: undefined,\r\n    });\r\n  }\r\n});\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { loginTC } from 'store/auth/asyncThunks/loginTC';\r\n\r\nconst slice = createSlice({\r\n  name: 'auth',\r\n  initialState: {\r\n    isLoggedIn: false,\r\n  },\r\n  reducers: {\r\n    setIsLoggedInAC(state: any, action: PayloadAction<{ value: boolean }>) {\r\n      state.isLoggedIn = action.payload.value;\r\n    },\r\n  },\r\n  extraReducers: builder => {\r\n    builder.addCase(loginTC.fulfilled, (state, action) => {\r\n      state.isLoggedIn = action.payload.isLoggedIn;\r\n    });\r\n  },\r\n});\r\n\r\nexport const auth = slice.reducer;\r\nexport const { setIsLoggedInAC } = slice.actions;\r\n","import { AppRootStateType } from 'store/store';\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType): boolean =>\r\n  state.auth.isLoggedIn;\r\n","import { instance } from 'api/config';\r\nimport { TodolistType, ResponseType } from 'api/types';\r\n\r\nexport const todolistsAPI = {\r\n  getTodolists() {\r\n    return instance.get<TodolistType[]>('todo-lists');\r\n  },\r\n  createTodolist(title: string) {\r\n    return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {\r\n      title,\r\n    });\r\n  },\r\n  deleteTodolist(id: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n  },\r\n  updateTodolist(id: string, title: string) {\r\n    return instance.put<ResponseType>(`todo-lists/${id}`, { title });\r\n  },\r\n};\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { TodolistType } from 'api/types';\r\nimport { RequestStatusType } from 'store/app/types';\r\nimport { FilterValuesType, TodolistDomainType } from 'store/todolists/types';\r\n\r\nconst initialState: Array<TodolistDomainType> = [];\r\nconst slice = createSlice({\r\n  name: 'todolist',\r\n  initialState,\r\n  reducers: {\r\n    removeTodolistAC(state: any, action: PayloadAction<{ id: string }>) {\r\n      // state.filter(tl => tl.id != action.payload.id)\r\n      const index = state.findIndex((tl: { id: string }) => tl.id === action.payload.id);\r\n\r\n      if (index > -1) {\r\n        state.splice(index, 1);\r\n      }\r\n    },\r\n    addTodolistAC(state: any, action: PayloadAction<{ todolist: TodolistType }>) {\r\n      state.unshift({ ...action.payload.todolist, filter: 'all', entityStatus: 'idle' });\r\n    },\r\n    changeTodolistTitleAC(\r\n      state: any,\r\n      action: PayloadAction<{ id: string; title: string }>,\r\n    ) {\r\n      const index = state.findIndex((tl: { id: string }) => tl.id === action.payload.id);\r\n\r\n      state[index].title = action.payload.title;\r\n    },\r\n    changeTodolistFilterAC(\r\n      state: any,\r\n      action: PayloadAction<{ id: string; filter: FilterValuesType }>,\r\n    ) {\r\n      const index = state.findIndex((tl: { id: string }) => tl.id === action.payload.id);\r\n\r\n      state[index].filter = action.payload.filter;\r\n    },\r\n    changeTodolistEntityStatusAC(\r\n      state: any,\r\n      action: PayloadAction<{ id: string; status: RequestStatusType }>,\r\n    ) {\r\n      const index = state.findIndex((tl: { id: string }) => tl.id === action.payload.id);\r\n\r\n      state[index].entityStatus = action.payload.status;\r\n    },\r\n    setTodolistsAC(\r\n      state: any,\r\n      action: PayloadAction<{ todolists: Array<TodolistType> }>,\r\n    ) {\r\n      return action.payload.todolists.map(tl => ({\r\n        ...tl,\r\n        filter: 'all',\r\n        entityStatus: 'idle',\r\n      }));\r\n    },\r\n  },\r\n});\r\n\r\nexport const todolists = slice.reducer;\r\nexport const {\r\n  removeTodolistAC,\r\n  addTodolistAC,\r\n  changeTodolistTitleAC,\r\n  changeTodolistFilterAC,\r\n  changeTodolistEntityStatusAC,\r\n  setTodolistsAC,\r\n} = slice.actions;\r\n","import React, { useCallback } from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport { useDispatch } from 'react-redux';\r\nimport { useLocation } from 'react-router-dom';\r\n\r\nimport logo from 'assets/images/logo.svg';\r\nimport { AddItemForm } from 'components/AddItemForm/AddItemForm';\r\nimport s from 'components/Header/style.module.css';\r\nimport { useAppSelector } from 'hooks/useSelector';\r\nimport { selectStatus } from 'store/app/selectors';\r\nimport { logoutTC } from 'store/auth/asyncThunks/logoutTC';\r\nimport { selectIsLoggedIn } from 'store/auth/selectors';\r\nimport { addTodolistTC } from 'store/todolists/asyncThunks/addTodolistTC';\r\n\r\nexport const Header = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { pathname } = useLocation();\r\n\r\n  const status = useAppSelector(selectStatus);\r\n  const isLoggedIn = useAppSelector(selectIsLoggedIn);\r\n\r\n  const isOpacityElement = pathname !== '/login';\r\n  const isStatusLoading = status === 'loading';\r\n\r\n  const onLogoutClick = useCallback(() => {\r\n    dispatch(logoutTC());\r\n  }, []);\r\n\r\n  const addTodolist = useCallback(\r\n    (title: string) => {\r\n      dispatch(addTodolistTC(title));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  return (\r\n    <div className={`${s.wrapper} container`}>\r\n      <img src={logo} alt=\"logo\" />\r\n      {isStatusLoading && (\r\n        <div className=\"linearProgress\">\r\n          <LinearProgress />\r\n        </div>\r\n      )}\r\n\r\n      {isOpacityElement && <AddItemForm addItem={addTodolist} />}\r\n      {isLoggedIn && (\r\n        <Button color=\"inherit\" onClick={onLogoutClick}>\r\n          Log out\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { authAPI } from 'api/auth';\r\nimport { setAppStatusAC } from 'store/app/slices';\r\nimport { setIsLoggedInAC } from 'store/auth/slices';\r\nimport { handleServerAppError, handleServerNetworkError } from 'utils/error-utils';\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({ status: 'loading' }));\r\n  authAPI\r\n    .logout()\r\n    .then((res: { data: { resultCode: number } }) => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC({ value: false }));\r\n        dispatch(setAppStatusAC({ status: 'succeeded' }));\r\n      } else {\r\n        // @ts-ignore\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error: { message: string }) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { todolistsAPI } from 'api/todolist';\r\nimport { setAppStatusAC } from 'store/app/slices';\r\nimport { addTodolistAC } from 'store/todolists/slices';\r\n\r\nexport const addTodolistTC = (title: string) => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }));\r\n    todolistsAPI.createTodolist(title).then((res: { data: { data: { item: any } } }) => {\r\n      dispatch(addTodolistAC({ todolist: res.data.data.item }));\r\n      dispatch(setAppStatusAC({ status: 'succeeded' }));\r\n    });\r\n  };\r\n};\r\n","import { instance } from 'api/config';\r\nimport { GetTasksResponse, TaskType, UpdateTaskModelType, ResponseType } from 'api/types';\r\n\r\nexport const taskAPI = {\r\n  getTasks(todolistId: string) {\r\n    return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n  },\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n  },\r\n  createTask(todolistId: string, taskTitle: string) {\r\n    return instance.post<ResponseType<{ item: TaskType }>>(\r\n      `todo-lists/${todolistId}/tasks`,\r\n      { title: taskTitle },\r\n    );\r\n  },\r\n  updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n    return instance.put<ResponseType<TaskType>>(\r\n      `todo-lists/${todolistId}/tasks/${taskId}`,\r\n      model,\r\n    );\r\n  },\r\n};\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nimport { taskAPI } from 'api/task';\r\nimport { setAppStatusAC } from 'store/app/slices';\r\n\r\nexport const fetchTasksTC = createAsyncThunk(\r\n  'tasks/fetchTasks',\r\n  async (todolistId: string, thunkApi) => {\r\n    thunkApi.dispatch(setAppStatusAC({ status: 'loading' }));\r\n    const res = await taskAPI.getTasks(todolistId);\r\n    const tasks = res.data.items;\r\n\r\n    thunkApi.dispatch(setAppStatusAC({ status: 'succeeded' }));\r\n\r\n    return { tasks, todolistId };\r\n  },\r\n);\r\n","import { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nimport { taskAPI } from 'api/task';\r\n\r\nexport const removeTaskTC = createAsyncThunk(\r\n  'tasks/removeTask',\r\n  async (param: { taskId: string; todolistId: string }) => {\r\n    await taskAPI.deleteTask(param.todolistId, param.taskId);\r\n\r\n    return { taskId: param.taskId, todolistId: param.todolistId };\r\n  },\r\n);\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nimport { TaskType } from 'api/types';\r\nimport { fetchTasksTC } from 'store/tasks/asyncThunks/fetchTasksTC';\r\nimport { removeTaskTC } from 'store/tasks/asyncThunks/removeTaskTC';\r\nimport { addTodolistAC, removeTodolistAC, setTodolistsAC } from 'store/todolists/slices';\r\n\r\nconst initialState: any = {};\r\n\r\nconst slice = createSlice({\r\n  name: 'tasks',\r\n  initialState,\r\n  reducers: {\r\n    addTaskAC(state: any, action: PayloadAction<TaskType>) {\r\n      state[action.payload.todoListId].unshift(action.payload);\r\n    },\r\n    updateTaskAC(\r\n      state: any,\r\n      action: PayloadAction<{ taskId: string; model: any; todolistId: string }>,\r\n    ) {\r\n      const tasks = state[action.payload.todolistId];\r\n      const index = tasks.findIndex((t: any) => t.id === action.payload.taskId);\r\n\r\n      if (index > -1) {\r\n        tasks[index] = { ...tasks[index], ...action.payload.model };\r\n      }\r\n    },\r\n  },\r\n  extraReducers: builder => {\r\n    builder.addCase(addTodolistAC, (state, action) => {\r\n      state[action.payload.todolist.id] = [];\r\n    });\r\n    builder.addCase(removeTodolistAC, (state, action) => {\r\n      delete state[action.payload.id];\r\n    });\r\n    builder.addCase(setTodolistsAC, (state, action) => {\r\n      action.payload.todolists.forEach((tl: any) => {\r\n        state[tl.id] = [];\r\n      });\r\n    });\r\n    builder.addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n      state[action.payload.todolistId] = action.payload.tasks;\r\n    });\r\n    builder.addCase(removeTaskTC.fulfilled, (state, action) => {\r\n      const tasks = state[action.payload.todolistId];\r\n      const index = tasks.findIndex((t: any) => t.id === action.payload.taskId);\r\n\r\n      if (index > -1) {\r\n        tasks.splice(index, 1);\r\n      }\r\n    });\r\n  },\r\n});\r\n\r\nexport const tasks = slice.reducer;\r\nexport const { addTaskAC, updateTaskAC } = slice.actions;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { useDispatch } from 'react-redux';\r\nimport { combineReducers } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport { app } from 'store/app/slices';\r\nimport { auth } from 'store/auth/slices';\r\nimport { tasks } from 'store/tasks/slices';\r\nimport { todolists } from 'store/todolists/slices';\r\n\r\nconst rootReducer = combineReducers({\r\n  tasks,\r\n  todolists,\r\n  app,\r\n  auth,\r\n});\r\n\r\nexport type RootReducerType = typeof rootReducer;\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware),\r\n});\r\n\r\nexport type AppRootStateType = ReturnType<RootReducerType>;\r\n\r\ntype AppDispatchType = typeof store.dispatch;\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>();\r\n","import React from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { FormikHelpers, useFormik } from 'formik';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport { useAppSelector } from 'hooks/useSelector';\r\nimport { loginTC } from 'store/auth/asyncThunks/loginTC';\r\nimport { selectIsLoggedIn } from 'store/auth/selectors';\r\nimport { useAppDispatch } from 'store/store';\r\n\r\ntype FormValuesType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n};\r\n\r\nexport const Login = () => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const isLoggedIn = useAppSelector(selectIsLoggedIn);\r\n\r\n  const formik = useFormik({\r\n    validate: values => {\r\n      if (!values.email) {\r\n        return {\r\n          email: 'Email is required',\r\n        };\r\n      }\r\n      if (!values.password) {\r\n        return {\r\n          password: 'Password is required',\r\n        };\r\n      }\r\n    },\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false,\r\n    },\r\n    onSubmit: async (\r\n      values: FormValuesType,\r\n      formikHelpers: FormikHelpers<FormValuesType>,\r\n    ) => {\r\n      const action = await dispatch(loginTC(values));\r\n\r\n      if (loginTC.rejected.match(action)) {\r\n        if (action.payload?.fieldsErrors?.length) {\r\n          const error = action.payload?.fieldsErrors[0];\r\n\r\n          formikHelpers.setFieldError(error.field, error.error);\r\n        }\r\n      }\r\n    },\r\n  });\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n    <Grid container justify=\"center\">\r\n      <Grid item xs={4}>\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <FormControl>\r\n            <FormLabel>\r\n              <p>\r\n                To log in get registered{' '}\r\n                <a\r\n                  href=\"https://social-network.samuraijs.com/\"\r\n                  target=\"_blank\"\r\n                  rel=\"noreferrer\"\r\n                >\r\n                  here\r\n                </a>\r\n              </p>\r\n              <p>or use common test account credentials:</p>\r\n              <p> Email: bogdankozlovski18@gmail.com</p>\r\n              <p>Password: socialPassword</p>\r\n            </FormLabel>\r\n            <FormGroup>\r\n              <TextField\r\n                label=\"Email\"\r\n                margin=\"normal\"\r\n                {...formik.getFieldProps('email')}\r\n              />\r\n              {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n              <TextField\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                margin=\"normal\"\r\n                {...formik.getFieldProps('password')}\r\n              />\r\n              {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n              <FormControlLabel\r\n                label=\"Remember me\"\r\n                control={\r\n                  <Checkbox\r\n                    {...formik.getFieldProps('rememberMe')}\r\n                    checked={formik.values.rememberMe}\r\n                  />\r\n                }\r\n              />\r\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n                Login\r\n              </Button>\r\n            </FormGroup>\r\n          </FormControl>\r\n        </form>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import React, { ChangeEvent, useState } from 'react';\r\n\r\nimport { TextField } from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n  value: string;\r\n  onChange: (newValue: string) => void;\r\n};\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n  const { value, onChange } = props;\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [title, setTitle] = useState(value);\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true);\r\n    setTitle(value);\r\n  };\r\n\r\n  const activateViewMode = () => {\r\n    setEditMode(false);\r\n    onChange(title);\r\n  };\r\n\r\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value);\r\n  };\r\n\r\n  return editMode ? (\r\n    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n  ) : (\r\n    <span onDoubleClick={activateEditMode}>{value}</span>\r\n  );\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\n\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { Delete } from '@material-ui/icons';\r\n\r\nimport { TaskStatuses } from 'api/types';\r\nimport { EditableSpan } from 'components/EditableSpan/EditableSpan';\r\nimport { TaskPropsType } from 'features/TodolistsList/Todolist/Task/types';\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n  const { task, changeTaskTitle, changeTaskStatus, todolistId, removeTask } = props;\r\n\r\n  const onClickHandler = useCallback(\r\n    () => removeTask(task.id, todolistId),\r\n    [task.id, todolistId],\r\n  );\r\n\r\n  const onChangeHandler = useCallback(\r\n    (e: ChangeEvent<HTMLInputElement>) => {\r\n      const newIsDoneValue = e.currentTarget.checked;\r\n\r\n      changeTaskStatus(\r\n        task.id,\r\n        newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New,\r\n        todolistId,\r\n      );\r\n    },\r\n    [task.id, todolistId],\r\n  );\r\n\r\n  const onTitleChangeHandler = useCallback(\r\n    (newValue: string) => {\r\n      changeTaskTitle(task.id, newValue, todolistId);\r\n    },\r\n    [task.id, todolistId],\r\n  );\r\n\r\n  return (\r\n    <div\r\n      key={task.id}\r\n      className={task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n    >\r\n      <Checkbox\r\n        checked={task.status === TaskStatuses.Completed}\r\n        color=\"primary\"\r\n        onChange={onChangeHandler}\r\n      />\r\n\r\n      <EditableSpan value={task.title} onChange={onTitleChangeHandler} />\r\n      <IconButton onClick={onClickHandler}>\r\n        <Delete />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n});\r\n","import React, { useCallback } from 'react';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { NavigatePropsType } from 'features/TodolistsList/Navigate/types';\r\n\r\nexport const Navigate = (props: NavigatePropsType) => {\r\n  const { todolist, changeFilter } = props;\r\n\r\n  const onAllClickHandler = useCallback(\r\n    () => changeFilter('all', todolist.id),\r\n    [todolist.id, changeFilter],\r\n  );\r\n\r\n  const onActiveClickHandler = useCallback(\r\n    () => changeFilter('active', todolist.id),\r\n    [todolist.id, changeFilter],\r\n  );\r\n\r\n  const onCompletedClickHandler = useCallback(\r\n    () => changeFilter('completed', todolist.id),\r\n    [todolist.id, changeFilter],\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        variant={todolist.filter === 'all' ? 'outlined' : 'text'}\r\n        onClick={onAllClickHandler}\r\n        color=\"default\"\r\n      >\r\n        All\r\n      </Button>\r\n      <Button\r\n        variant={todolist.filter === 'active' ? 'outlined' : 'text'}\r\n        onClick={onActiveClickHandler}\r\n        color=\"primary\"\r\n      >\r\n        Active\r\n      </Button>\r\n      <Button\r\n        variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n        onClick={onCompletedClickHandler}\r\n        color=\"secondary\"\r\n      >\r\n        Completed\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n","import React, { useCallback, useEffect } from 'react';\r\n\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { Task } from './Task/Task';\r\n\r\nimport { TaskStatuses } from 'api/types';\r\nimport { AddItemForm } from 'components/AddItemForm/AddItemForm';\r\nimport { EditableSpan } from 'components/EditableSpan/EditableSpan';\r\nimport { Navigate } from 'features/TodolistsList/Navigate/Navigate';\r\nimport s from 'features/TodolistsList/style.module.css';\r\nimport { TodolistPropsType } from 'features/TodolistsList/Todolist/types';\r\nimport { fetchTasksTC } from 'store/tasks/asyncThunks/fetchTasksTC';\r\n\r\nexport const Todolist = React.memo(function (props: TodolistPropsType) {\r\n  const {\r\n    todolist,\r\n    changeTodolistTitle,\r\n    changeTaskTitle,\r\n    changeTaskStatus,\r\n    removeTodolist,\r\n    changeFilter,\r\n    removeTask,\r\n    tasks,\r\n    addTask,\r\n    demo,\r\n  } = props;\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onAddTaskClick = useCallback(\r\n    (title: string) => {\r\n      addTask(title, todolist.id);\r\n    },\r\n    [addTask, todolist.id],\r\n  );\r\n\r\n  const onRemoveTodolistClick = () => {\r\n    removeTodolist(todolist.id);\r\n  };\r\n\r\n  const changeTodolistTitleValue = useCallback(\r\n    (title: string) => {\r\n      changeTodolistTitle(todolist.id, title);\r\n    },\r\n    [todolist.id, changeTodolistTitle],\r\n  );\r\n\r\n  let tasksForTodolist = tasks;\r\n\r\n  if (todolist.filter === 'active') {\r\n    tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.New);\r\n  }\r\n  if (todolist.filter === 'completed') {\r\n    tasksForTodolist = tasks.filter(t => t.status === TaskStatuses.Completed);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (demo) {\r\n      return;\r\n    }\r\n    dispatch(fetchTasksTC(todolist.id));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h3 className={s.title}>\r\n        <EditableSpan value={todolist.title} onChange={changeTodolistTitleValue} />\r\n        <IconButton\r\n          onClick={onRemoveTodolistClick}\r\n          disabled={todolist.entityStatus === 'loading'}\r\n        >\r\n          <Delete />\r\n        </IconButton>\r\n      </h3>\r\n      <AddItemForm\r\n        addItem={onAddTaskClick}\r\n        disabled={todolist.entityStatus === 'loading'}\r\n      />\r\n      <div>\r\n        {tasksForTodolist.map(t => (\r\n          <Task\r\n            key={t.id}\r\n            task={t}\r\n            todolistId={todolist.id}\r\n            removeTask={removeTask}\r\n            changeTaskTitle={changeTaskTitle}\r\n            changeTaskStatus={changeTaskStatus}\r\n          />\r\n        ))}\r\n      </div>\r\n      <div style={{ paddingTop: '10px' }}>\r\n        <Navigate todolist={todolist} changeFilter={changeFilter} />\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { taskAPI } from 'api/task';\r\nimport { UpdateTaskModelType } from 'api/types';\r\nimport { AppRootStateType } from 'store/store';\r\nimport { updateTaskAC } from 'store/tasks/slices';\r\nimport { UpdateDomainTaskModelType } from 'store/tasks/types';\r\nimport { handleServerAppError, handleServerNetworkError } from 'utils/error-utils';\r\n\r\nexport const updateTaskTC =\r\n  (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n  (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const state = getState();\r\n    // @ts-ignore\r\n    const task = state.tasks[todolistId].find(t => t.id === taskId);\r\n\r\n    if (!task) {\r\n      // throw new Error(\"task not found in the state\");\r\n      console.warn('task not found in the state');\r\n\r\n      return;\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n      deadline: task.deadline,\r\n      description: task.description,\r\n      priority: task.priority,\r\n      startDate: task.startDate,\r\n      title: task.title,\r\n      status: task.status,\r\n      ...model,\r\n    };\r\n\r\n    taskAPI\r\n      .updateTask(todolistId, taskId, apiModel)\r\n      .then((res: { data: { resultCode: number } }) => {\r\n        if (res.data.resultCode === 0) {\r\n          const action = updateTaskAC({ taskId, model, todolistId });\r\n\r\n          dispatch(action);\r\n        } else {\r\n          // @ts-ignore\r\n          handleServerAppError(res.data, dispatch);\r\n        }\r\n      })\r\n      .catch((error: { message: string }) => {\r\n        handleServerNetworkError(error, dispatch);\r\n      });\r\n  };\r\n","// import { TaskType } from 'api/types';\r\nimport { AppRootStateType } from 'store/store';\r\n\r\nexport const selectTasks = (state: AppRootStateType) => state.tasks;\r\n","import { AppRootStateType } from 'store/store';\r\n\r\nexport const selectTodolists = (state: AppRootStateType) => state.todolists;\r\n","import React, { useCallback, useEffect } from 'react';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport { Todolist } from './Todolist/Todolist';\r\n\r\nimport { TaskStatuses } from 'api/types';\r\nimport s from 'features/TodolistsList/style.module.css';\r\nimport { useAppSelector } from 'hooks/useSelector';\r\nimport { selectIsLoggedIn } from 'store/auth/selectors';\r\nimport { addTaskTC } from 'store/tasks/asyncThunks/addTaskTC';\r\nimport { removeTaskTC } from 'store/tasks/asyncThunks/removeTaskTC';\r\nimport { updateTaskTC } from 'store/tasks/asyncThunks/updateTaskTC';\r\nimport { selectTasks } from 'store/tasks/selectors';\r\nimport { changeTodolistTitleTC } from 'store/todolists/asyncThunks/changeTodolistTitleTC';\r\nimport { fetchTodolistsTC } from 'store/todolists/asyncThunks/fetchTodolistsTC';\r\nimport { removeTodolistTC } from 'store/todolists/asyncThunks/removeTodolistTC';\r\nimport { selectTodolists } from 'store/todolists/selectors';\r\nimport { changeTodolistFilterAC } from 'store/todolists/slices';\r\nimport { FilterValuesType } from 'store/todolists/types';\r\n\r\ntype PropsType = {\r\n  demo?: boolean;\r\n};\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({ demo = false }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const todolists = useAppSelector(selectTodolists);\r\n  const tasks = useAppSelector(selectTasks);\r\n  const isLoggedIn = useAppSelector(selectIsLoggedIn);\r\n\r\n  const removeTask = useCallback((taskId: string, todolistId: string) => {\r\n    dispatch(removeTaskTC({ taskId, todolistId }));\r\n  }, []);\r\n\r\n  const addTask = useCallback((title: string, todolistId: string) => {\r\n    dispatch(addTaskTC(title, todolistId));\r\n  }, []);\r\n\r\n  const changeStatus = useCallback(\r\n    (id: string, status: TaskStatuses, todolistId: string) => {\r\n      dispatch(updateTaskTC(id, { status }, todolistId));\r\n    },\r\n    [],\r\n  );\r\n\r\n  const changeTaskTitle = useCallback(\r\n    (id: string, newTitle: string, todolistId: string) => {\r\n      dispatch(updateTaskTC(id, { title: newTitle }, todolistId));\r\n    },\r\n    [],\r\n  );\r\n\r\n  const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\r\n    dispatch(changeTodolistFilterAC({ id: todolistId, filter: value }));\r\n  }, []);\r\n\r\n  const removeTodolist = useCallback((id: string) => {\r\n    dispatch(removeTodolistTC(id));\r\n  }, []);\r\n\r\n  const changeTodolistTitle = useCallback((id: string, title: string) => {\r\n    dispatch(changeTodolistTitleTC(id, title));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (demo || !isLoggedIn) {\r\n      return;\r\n    }\r\n    dispatch(fetchTodolistsTC());\r\n  }, []);\r\n\r\n  if (!isLoggedIn) {\r\n    return <Redirect to=\"/login\" />;\r\n  }\r\n\r\n  return (\r\n    <Grid container spacing={3} className={s.wrapper}>\r\n      {todolists.map(tl => {\r\n        const allTodolistTasks = tasks[tl.id];\r\n\r\n        return (\r\n          <Grid key={tl.id}>\r\n            <Paper className={s.block}>\r\n              <Todolist\r\n                todolist={tl}\r\n                tasks={allTodolistTasks}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                addTask={addTask}\r\n                changeTaskStatus={changeStatus}\r\n                removeTodolist={removeTodolist}\r\n                changeTaskTitle={changeTaskTitle}\r\n                changeTodolistTitle={changeTodolistTitle}\r\n                demo={demo}\r\n              />\r\n            </Paper>\r\n          </Grid>\r\n        );\r\n      })}\r\n    </Grid>\r\n  );\r\n};\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { taskAPI } from 'api/task';\r\nimport { setAppStatusAC } from 'store/app/slices';\r\nimport { addTaskAC } from 'store/tasks/slices';\r\nimport { handleServerAppError, handleServerNetworkError } from 'utils/error-utils';\r\n\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n  dispatch(setAppStatusAC({ status: 'loading' }));\r\n  taskAPI\r\n    .createTask(todolistId, title)\r\n    .then((res: { data: { resultCode: number; data: { item: any } } }) => {\r\n      if (res.data.resultCode === 0) {\r\n        const task = res.data.data.item;\r\n        const action = addTaskAC(task);\r\n\r\n        dispatch(action);\r\n        dispatch(setAppStatusAC({ status: 'succeeded' }));\r\n      } else {\r\n        // @ts-ignore\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error: { message: string }) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { todolistsAPI } from 'api/todolist';\r\nimport { setAppStatusAC } from 'store/app/slices';\r\nimport { changeTodolistEntityStatusAC, removeTodolistAC } from 'store/todolists/slices';\r\n\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n  return (dispatch: Dispatch) => {\r\n    // изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n    dispatch(setAppStatusAC({ status: 'loading' }));\r\n    // изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n    dispatch(changeTodolistEntityStatusAC({ id: todolistId, status: 'loading' }));\r\n    todolistsAPI.deleteTodolist(todolistId).then(() => {\r\n      dispatch(removeTodolistAC({ id: todolistId }));\r\n      // скажем глобально приложению, что асинхронная операция завершена\r\n      dispatch(setAppStatusAC({ status: 'succeeded' }));\r\n    });\r\n  };\r\n};\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { todolistsAPI } from 'api/todolist';\r\nimport { changeTodolistTitleAC } from 'store/todolists/slices';\r\n\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n  return (dispatch: Dispatch) => {\r\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    todolistsAPI.updateTodolist(id, title).then(() => {\r\n      dispatch(changeTodolistTitleAC({ id, title }));\r\n    });\r\n  };\r\n};\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { todolistsAPI } from 'api/todolist';\r\nimport { setAppStatusAC } from 'store/app/slices';\r\nimport { setTodolistsAC } from 'store/todolists/slices';\r\nimport { handleServerNetworkError } from 'utils/error-utils';\r\n\r\nexport const fetchTodolistsTC = () => {\r\n  return (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }));\r\n    todolistsAPI\r\n      .getTodolists()\r\n      .then((res: { data: any }) => {\r\n        dispatch(setTodolistsAC({ todolists: res.data }));\r\n        dispatch(setAppStatusAC({ status: 'succeeded' }));\r\n      })\r\n      .catch((error: any) => {\r\n        handleServerNetworkError(error, dispatch);\r\n      });\r\n  };\r\n};\r\n","import React, { useEffect } from 'react';\r\n\r\nimport './App.css';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Container from '@material-ui/core/Container';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Route } from 'react-router-dom';\r\n\r\nimport { ErrorSnackbar } from 'components/ErrorSnackbar/ErrorSnackbar';\r\nimport { Header } from 'components/Header/Header';\r\nimport { Login } from 'features/Login/Login';\r\nimport { TodolistsList } from 'features/TodolistsList/TodolistsList';\r\nimport { useAppSelector } from 'hooks/useSelector';\r\nimport { initializeAppTC } from 'store/app/asyncThunks/initializeAppTC';\r\nimport { selectIsInitialized } from 'store/app/selectors';\r\n\r\ntype PropsType = {\r\n  demo?: boolean;\r\n};\r\n\r\nexport const App = ({ demo = false }: PropsType) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const isInitialized = useAppSelector(selectIsInitialized);\r\n\r\n  useEffect(() => {\r\n    if (!demo) {\r\n      dispatch(initializeAppTC());\r\n    }\r\n  }, []);\r\n\r\n  if (!isInitialized) {\r\n    return (\r\n      <div className=\"progress\">\r\n        <CircularProgress />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorSnackbar />\r\n      <Header />\r\n      <Container fixed>\r\n        <Route path=\"/\" render={() => <TodolistsList demo={demo} />} />\r\n        <Route path=\"/login\" render={() => <Login />} />\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n","import { Dispatch } from 'redux';\r\n\r\nimport { authAPI } from 'api/auth';\r\nimport { setAppInitializedAC } from 'store/app/slices';\r\nimport { setIsLoggedInAC } from 'store/auth/slices';\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n  authAPI.me().then(res => {\r\n    if (res.data.resultCode === 0) {\r\n      dispatch(setIsLoggedInAC({ value: true }));\r\n    }\r\n    dispatch(setAppInitializedAC({ isInitialized: true }));\r\n  });\r\n};\r\n","import React from 'react';\r\n\r\nimport './index.css';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { App } from 'app/App';\r\nimport { store } from 'store/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"style_wrapper__ITAYz\",\"block\":\"style_block__3rCaN\",\"title\":\"style_title__2zFL0\"};","module.exports = __webpack_public_path__ + \"static/media/logo.7825c304.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"span\":\"style_span__zc1F9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"style_wrapper__2CV6k\"};"],"sourceRoot":""}